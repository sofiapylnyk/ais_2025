import tkinter as tk
from tkinter import messagebox, simpledialog
from collections import deque
import random
import time
import sys

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GUI —Ç–∞ –ö–æ–Ω—Å—Ç–∞–Ω—Ç ---
CELL_SIZE = 30
WALL = -1
PASSAGE = 0
START = 1
GOAL = 2
PATH = 3
VISITED = 4
FONT_STYLE = ('Arial', 10, 'bold')
VISUALIZATION_DELAY_MS = 10  # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó

# –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É —Ä–µ–∫—É—Ä—Å—ñ—ó –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
sys.setrecursionlimit(2000) 

class WaveSearchApp:
    def __init__(self, master):
        self.master = master
        master.title("üåä –•–≤–∏–ª—å–æ–≤–∏–π –ü–æ—à—É–∫ —É –õ–∞–±—ñ—Ä–∏–Ω—Ç—ñ")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ª–∞–±—ñ—Ä–∏–Ω—Ç—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.rows = 15
        self.cols = 15
        self.wall_density = 0.3
        self.grid = []
        self.start_node = (0, 0)
        self.goal_node = (self.rows - 1, self.cols - 1)
        self.path_result = []
        self.cycles = 0
        self.search_running = False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–∏—Ö —Ñ—Ä–µ–π–º—ñ–≤
        self.controls_frame = tk.Frame(master)
        self.controls_frame.pack(side=tk.LEFT, padx=10, pady=10, anchor='n')
        
        self.canvas_frame = tk.Frame(master)
        self.canvas_frame.pack(side=tk.LEFT, padx=10, pady=10)
        
        self.results_frame = tk.Frame(master)
        self.results_frame.pack(side=tk.RIGHT, padx=10, pady=10, anchor='n')

        self.create_controls()
        self.create_canvas()
        self.create_results_window()
        
        self.generate_labyrinth()

    def create_controls(self):
        # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –†–æ–∑–º—ñ—Ä—É —Ç–∞ –©—ñ–ª—å–Ω–æ—Å—Ç—ñ ---
        tk.Label(self.controls_frame, text="üìê –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –õ–∞–±—ñ—Ä–∏–Ω—Ç—É", font=FONT_STYLE).pack(pady=(5, 0))
        
        frame_size = tk.Frame(self.controls_frame)
        frame_size.pack()
        tk.Label(frame_size, text="–†—è–¥–∫—ñ–≤:").pack(side=tk.LEFT)
        self.row_entry = tk.Entry(frame_size, width=5)
        self.row_entry.insert(0, str(self.rows))
        self.row_entry.pack(side=tk.LEFT, padx=5)
        tk.Label(frame_size, text="–°—Ç–æ–≤–ø—Ü—ñ–≤:").pack(side=tk.LEFT)
        self.col_entry = tk.Entry(frame_size, width=5)
        self.col_entry.insert(0, str(self.cols))
        self.col_entry.pack(side=tk.LEFT)
        
        tk.Label(self.controls_frame, text="–©—ñ–ª—å–Ω—ñ—Å—Ç—å –°—Ç—ñ–Ω (0.1-0.5):").pack(pady=(5, 0))
        self.density_entry = tk.Entry(self.controls_frame, width=5)
        self.density_entry.insert(0, str(self.wall_density))
        self.density_entry.pack(pady=5)
        
        tk.Button(self.controls_frame, text="üõ†Ô∏è –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –õ–∞–±—ñ—Ä–∏–Ω—Ç", command=self.generate_labyrinth).pack(pady=10)

        # --- –í–∏–±—ñ—Ä –û–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ü–µ—Ä–µ—Ö–æ–¥—É ---
        tk.Label(self.controls_frame, text="‚û°Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –ü–µ—Ä–µ—Ö–æ–¥—É:", font=FONT_STYLE).pack(pady=(10, 0))
        self.operator_var = tk.StringVar(self.master)
        self.operator_var.set("Cardinal (–í–í–í–õ)")
        operators = ["Cardinal (–í–í–í–õ)", "Diagonal (–î—ñ–∞–≥–æ–Ω–∞–ª—ñ)", "Combined (–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π)"]
        self.operator_menu = tk.OptionMenu(self.controls_frame, self.operator_var, *operators)
        self.operator_menu.pack(pady=5)
        
        # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ü–æ—á–∞—Ç–∫–æ–≤–æ—ó/–¶—ñ–ª—å–æ–≤–æ—ó –í–µ—Ä—à–∏–Ω–∏ ---
        tk.Label(self.controls_frame, text="üéØ –¢–æ—á–∫–∏ (–†—è–¥, –°—Ç–æ–≤–ø–µ—Ü—å):", font=FONT_STYLE).pack(pady=(10, 0))
        frame_start = tk.Frame(self.controls_frame)
        frame_start.pack()
        tk.Label(frame_start, text="S:").pack(side=tk.LEFT)
        self.start_row_entry = tk.Entry(frame_start, width=4)
        self.start_row_entry.pack(side=tk.LEFT)
        self.start_col_entry = tk.Entry(frame_start, width=4)
        self.start_col_entry.pack(side=tk.LEFT)
        
        frame_goal = tk.Frame(self.controls_frame)
        frame_goal.pack()
        tk.Label(frame_goal, text="G:").pack(side=tk.LEFT)
        self.goal_row_entry = tk.Entry(frame_goal, width=4)
        self.goal_row_entry.pack(side=tk.LEFT)
        self.goal_col_entry = tk.Entry(frame_goal, width=4)
        self.goal_col_entry.pack(side=tk.LEFT)
        
        tk.Button(self.controls_frame, text="–û–Ω–æ–≤–∏—Ç–∏ –¢–æ—á–∫–∏", command=self.update_start_goal).pack(pady=5)
        
        # --- –ö–Ω–æ–ø–∫–∏ –ü–æ—à—É–∫—É —Ç–∞ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó ---
        tk.Button(self.controls_frame, text="üîé –ó–Ω–∞–π—Ç–∏ –®–ª—è—Ö", command=self.start_search, bg='lightblue').pack(pady=20)
        tk.Button(self.controls_frame, text="üî† –ü–æ–∫–∞–∑–∞—Ç–∏ –ú–∞—Ç—Ä–∏—Ü—é –°—É–º—ñ–∂–Ω–æ—Å—Ç—ñ", command=self.show_adjacency_matrix).pack(pady=5)


    def create_canvas(self):
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–∞–±—ñ—Ä–∏–Ω—Ç—É
        self.canvas_width = self.cols * CELL_SIZE
        self.canvas_height = self.rows * CELL_SIZE
        self.canvas = tk.Canvas(self.canvas_frame, width=self.canvas_width, height=self.canvas_height, bg='white')
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.on_canvas_click)

    def create_results_window(self):
        # --- –í—ñ–∫–Ω–æ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---
        tk.Label(self.results_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ü–æ—à—É–∫—É", font=FONT_STYLE).pack(pady=(5, 0))
        self.results_text = tk.Text(self.results_frame, height=15, width=40, state=tk.DISABLED, wrap=tk.WORD)
        self.results_text.pack(pady=10)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
        tk.Label(self.results_frame, text="–ó–∞—Ç—Ä–∏–º–∫–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó (–º—Å):", font=('Arial', 9)).pack(pady=(10, 0))
        self.delay_scale = tk.Scale(self.results_frame, from_=0, to=500, orient=tk.HORIZONTAL, length=200)
        self.delay_scale.set(VISUALIZATION_DELAY_MS)
        self.delay_scale.pack()

    def on_canvas_click(self, event):
        # –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç—ñ–Ω
        if self.search_running:
             messagebox.showinfo("–£–≤–∞–≥–∞", "–ü–æ—à—É–∫ —Ç—Ä–∏–≤–∞—î. –ó–∞—á–µ–∫–∞–π—Ç–µ.")
             return
             
        col = event.x // CELL_SIZE
        row = event.y // CELL_SIZE
        
        if 0 <= row < self.rows and 0 <= col < self.cols:
            if (row, col) != self.start_node and (row, col) != self.goal_node:
                # –ó–º—ñ–Ω–∞ —Å—Ç—ñ–Ω–∞ <-> –ø—Ä–æ—Ö—ñ–¥
                if self.grid[row][col] == WALL:
                    self.grid[row][col] = PASSAGE
                else:
                    self.grid[row][col] = WALL
                self.draw_labyrinth()
                self.path_result = [] 
                self.update_results()

    def update_start_goal(self):
        try:
            r_start = int(self.start_row_entry.get())
            c_start = int(self.start_col_entry.get())
            r_goal = int(self.goal_row_entry.get())
            c_goal = int(self.goal_col_entry.get())
            
            if not (0 <= r_start < self.rows and 0 <= c_start < self.cols and
                    0 <= r_goal < self.rows and 0 <= c_goal < self.cols):
                raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –ª–∞–±—ñ—Ä–∏–Ω—Ç—É.")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± —Å—Ç–∞—Ä—Ç/—Ü—ñ–ª—å –Ω–µ –±—É–ª–∏ —Å—Ç—ñ–Ω–∞–º–∏
            if self.grid[r_start][c_start] == WALL or self.grid[r_goal][c_goal] == WALL:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–°—Ç–∞—Ä—Ç–æ–≤–∞ –∞–±–æ —Ü—ñ–ª—å–æ–≤–∞ —Ç–æ—á–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç—ñ–Ω–æ—é (-1).")
                return

            self.start_node = (r_start, c_start)
            self.goal_node = (r_goal, c_goal)
            
            self.draw_labyrinth()
            self.path_result = []
            self.update_results()

        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –í–≤–æ–¥—É", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {e}")

    def generate_labyrinth(self):
        try:
            self.rows = int(self.row_entry.get())
            self.cols = int(self.col_entry.get())
            self.wall_density = float(self.density_entry.get())
            
            # –û–±–º–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—É –ø–æ—Ä—è–¥–∫—É 10-20, —Ä–æ–∑–º—ñ—Ä–æ–º 20-30
            if not (5 <= self.rows <= 30 and 5 <= self.cols <= 30 and 0.1 <= self.wall_density <= 0.5):
                raise ValueError("–†–æ–∑–º—ñ—Ä –º–∞—î –±—É—Ç–∏ 5-30, —â—ñ–ª—å–Ω—ñ—Å—Ç—å 0.1-0.5.")
                
            self.canvas_width = self.cols * CELL_SIZE
            self.canvas_height = self.rows * CELL_SIZE
            self.canvas.config(width=self.canvas_width, height=self.canvas_height)

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ: 0 - –ø—Ä–æ—Ö—ñ–¥, -1 - —Å—Ç—ñ–Ω–∞
            self.grid = [[random.choices([PASSAGE, WALL], weights=[1 - self.wall_density, self.wall_density])[0]
                          for _ in range(self.cols)] for _ in range(self.rows)]
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–∞ —Ü—ñ–ª—å–æ–≤–æ—ó —Ç–æ—á–æ–∫
            self.start_node = (0, 0)
            self.goal_node = (self.rows - 1, self.cols - 1)
            
            # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ —Å—Ç–∞—Ä—Ç —ñ —Ü—ñ–ª—å - –ø—Ä–æ—Ö–æ–¥–∏
            self.grid[self.start_node[0]][self.start_node[1]] = PASSAGE
            self.grid[self.goal_node[0]][self.goal_node[1]] = PASSAGE
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
            self.start_row_entry.delete(0, tk.END)
            self.start_row_entry.insert(0, str(self.start_node[0]))
            self.start_col_entry.delete(0, tk.END)
            self.start_col_entry.insert(0, str(self.start_node[1]))
            self.goal_row_entry.delete(0, tk.END)
            self.goal_row_entry.insert(0, str(self.goal_node[0]))
            self.goal_col_entry.delete(0, tk.END)
            self.goal_col_entry.insert(0, str(self.goal_node[1]))

            self.draw_labyrinth()
            self.path_result = []
            self.update_results()

        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –í–≤–æ–¥—É", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {e}")

    def draw_labyrinth(self, path=None, visited_nodes=None):
        self.canvas.delete("all")
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
        color_map = {
            WALL: 'gray',
            PASSAGE: 'white',
            START: 'green',
            GOAL: 'red',
            PATH: 'blue',
            VISITED: 'lightblue'
        }
        
        for r in range(self.rows):
            for c in range(self.cols):
                x1, y1 = c * CELL_SIZE, r * CELL_SIZE
                x2, y2 = x1 + CELL_SIZE, y1 + CELL_SIZE
                
                cell_type = self.grid[r][c]
                fill_color = color_map.get(cell_type, 'white')
                
                # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö
                if visited_nodes and (r, c) in visited_nodes and (r, c) != self.start_node and (r, c) != self.goal_node:
                    fill_color = color_map[VISITED]
                    
                # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —à–ª—è—Ö—É
                if path and (r, c) in path and (r, c) != self.start_node and (r, c) != self.goal_node:
                    fill_color = color_map[PATH]

                self.canvas.create_rectangle(x1, y1, x2, y2, fill=fill_color, outline='black')
                
        # 2. –ú–∞–ª—é–≤–∞–Ω–Ω—è –°—Ç–∞—Ä—Ç/–¶—ñ–ª—å –ø–æ–≤–µ—Ä—Ö —É—Å—å–æ–≥–æ
        r_start, c_start = self.start_node
        r_goal, c_goal = self.goal_node
        
        for r, c, tag in [(r_start, c_start, "S"), (r_goal, c_goal, "G")]:
            x1, y1 = c * CELL_SIZE, r * CELL_SIZE
            x2, y2 = x1 + CELL_SIZE, y1 + CELL_SIZE
            color = color_map[START] if tag == "S" else color_map[GOAL]
            self.canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline='black')
            self.canvas.create_text(x1 + CELL_SIZE/2, y1 + CELL_SIZE/2, text=tag, fill='white', font=FONT_STYLE)

        self.master.update_idletasks()
        self.master.update()


    def get_neighbors(self, r, c, operator):
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –ø–µ—Ä–µ—Ö–æ–¥—É (–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ö–æ–¥—É)
        operator_map = {
            "Cardinal (–í–í–í–õ)": [(0, 1), (0, -1), (1, 0), (-1, 0)],
            "Diagonal (–î—ñ–∞–≥–æ–Ω–∞–ª—ñ)": [(1, 1), (1, -1), (-1, 1), (-1, -1)],
            "Combined (–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π)": [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
        }
        
        directions = operator_map.get(operator, operator_map["Cardinal (–í–í–í–õ)"])

        neighbors = []
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            
            if 0 <= nr < self.rows and 0 <= nc < self.cols:
                if self.grid[nr][nc] != WALL:
                    neighbors.append((nr, nc))
        return neighbors

    def wave_search(self, start_node, goal_node, operator):
        """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–¥–Ω–æ-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ —Ö–≤–∏–ª—å–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É (BFS) –∑ –ø–æ–∫—Ä–æ–∫–æ–≤–æ—é –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é."""
        
        if self.grid[start_node[0]][start_node[1]] == WALL or self.grid[goal_node[0]][goal_node[1]] == WALL:
            return None, 0
        
        queue = deque([start_node])
        visited = {start_node}
        parent = {start_node: None}
        cycles = 0
        delay = self.delay_scale.get()

        self.search_running = True
        
        while queue:
            current_node = queue.popleft()
            cycles += 1
            
            # üí° –ü–æ–∫—Ä–æ–∫–æ–≤–∞ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ü–∏–∫–ª—ñ
            self.draw_labyrinth(visited_nodes=visited)
            if delay > 0:
                self.master.after(delay)
                self.master.update()

            if current_node == goal_node:
                # –®–ª—è—Ö –∑–Ω–∞–π–¥–µ–Ω–æ
                path = []
                while current_node is not None:
                    path.append(current_node)
                    current_node = parent[current_node]
                self.search_running = False
                return path[::-1], cycles

            # –†–æ–∑–∫—Ä–∏—Ç—Ç—è –≤–µ—Ä—à–∏–Ω–∏ (—Å—É—Å—ñ–¥–∏)
            for neighbor in self.get_neighbors(current_node[0], current_node[1], operator):
                if neighbor not in visited:
                    visited.add(neighbor)
                    parent[neighbor] = current_node
                    queue.append(neighbor)
        
        self.search_running = False
        return None, cycles

    def start_search(self):
        if self.search_running:
            messagebox.showinfo("–£–≤–∞–≥–∞", "–ü–æ—à—É–∫ –≤–∂–µ —Ç—Ä–∏–≤–∞—î.")
            return

        self.draw_labyrinth()
        self.path_result = []
        self.cycles = 0
        self.update_start_goal()

        operator = self.operator_var.get()
        
        start_time = time.time()
        path, cycles = self.wave_search(self.start_node, self.goal_node, operator)
        end_time = time.time()
        search_time = end_time - start_time
        
        self.cycles = cycles
        self.path_result = path
        
        if path:
            self.draw_labyrinth(path=path)
            message = "‚úÖ –®–ª—è—Ö –∑–Ω–∞–π–¥–µ–Ω–æ!"
        else:
            self.draw_labyrinth()
            message = "‚ùå –®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        
        self.update_results(message, search_time, len(path) if path else 0, operator)

    def update_results(self, message="–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É", time=0.0, path_len=0, operator="N/A"):
        self.results_text.config(state=tk.NORMAL)
        self.results_text.delete(1.0, tk.END)
        
        output = f"--- –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–®–£–ö–£ ---\n\n"
        output += f"–°—Ç–∞—Ç—É—Å: {message}\n"
        output += f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}\n"
        output += f"–ß–∞—Å –ø–æ—à—É–∫—É: {time:.6f} —Å–µ–∫\n"
        output += f"–¶–∏–∫–ª–∏ (–†–æ–∑–∫—Ä–∏—Ç—Ç—è –í–µ—Ä—à–∏–Ω): {self.cycles}\n"
        output += f"–î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É: {path_len}\n"
        output += f"–†–æ–∑–º—ñ—Ä –õ–∞–±—ñ—Ä–∏–Ω—Ç—É: {self.rows}x{self.cols}\n"
        
        if self.path_result:
            output += "\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ó–Ω–∞–π–¥–µ–Ω–æ–≥–æ –®–ª—è—Ö—É (—á–∞—Å—Ç–∏–Ω–∞):\n"
            path_str = " -> ".join([f"({r},{c})" for r, c in self.path_result[:10]])
            if len(self.path_result) > 10:
                 path_str += " -> ..."
            output += path_str
            
        self.results_text.insert(tk.END, output)
        self.results_text.config(state=tk.DISABLED)

    def show_adjacency_matrix(self):
        # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞–ø–∏ (–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ -> –Ü–Ω–¥–µ–∫—Å –≤–µ—Ä—à–∏–Ω–∏) –¥–ª—è –ø—Ä–æ—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫
        node_map = {}
        idx = 0
        passage_nodes = []
        for r in range(self.rows):
            for c in range(self.cols):
                if self.grid[r][c] != WALL:
                    node_map[(r, c)] = idx
                    passage_nodes.append((r, c))
                    idx += 1
        
        N = len(passage_nodes) # –ü–æ—Ä—è–¥–æ–∫ –≥—Ä–∞—Ñ—É (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ö—ñ–¥–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω)
        
        if N == 0:
             messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–£ –ª–∞–±—ñ—Ä–∏–Ω—Ç—ñ –Ω–µ–º–∞—î –ø—Ä–æ—Ö—ñ–¥–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω.")
             return
             
        # 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è N x N –º–∞—Ç—Ä–∏—Ü—ñ —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ
        adjacency_matrix = [[0] * N for _ in range(N)]
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ
        # (–≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏, —è–∫—ñ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ—É)
        operator_type = "Combined (–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π)" 
        
        for r, c in passage_nodes:
            current_idx = node_map[(r, c)]
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É—Å—ñ–¥—ñ–≤, —è–∫—ñ —î –ø—Ä–æ—Ö—ñ–¥–Ω–∏–º–∏
            neighbors = self.get_neighbors(r, c, operator_type)
            
            for nr, nc in neighbors:
                neighbor_idx = node_map[(nr, nc)]
                # –ù–µ–∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ: 1, —è–∫—â–æ —Å—É–º—ñ–∂–Ω—ñ
                adjacency_matrix[current_idx][neighbor_idx] = 1 

        # 3. –í–∏–≤–µ–¥–µ–Ω–Ω—è —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ
        matrix_window = tk.Toplevel(self.master)
        matrix_window.title(f"–ú–∞—Ç—Ä–∏—Ü—è –°—É–º—ñ–∂–Ω–æ—Å—Ç—ñ (–ü–æ—Ä—è–¥–æ–∫ N={N})")
        
        header_text = f"–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ N={N} (–ü—Ä–æ—Ö—ñ–¥–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏: {self.rows*self.cols - N} —Å—Ç—ñ–Ω)\n\n"
        header_text += "–í–µ—Ä—à–∏–Ω–∏ (–Ü–Ω–¥–µ–∫—Å: (–†—è–¥, –°—Ç–æ–≤–ø–µ—Ü—å)):\n"
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –º–∞–ø–∏ —ñ–Ω–¥–µ–∫—Å—ñ–≤
        map_str = ""
        for coord, index in node_map.items():
            map_str += f"{index}: {coord} | "
            if (index + 1) % 5 == 0: map_str += "\n"
        
        matrix_text = tk.Text(matrix_window, height=30, width=80, wrap=tk.NONE)
        matrix_text.pack(padx=10, pady=10)
        matrix_text.insert(tk.END, header_text)
        matrix_text.insert(tk.END, map_str + "\n\n")

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–∞–º–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ (–æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –º–∞—Ç—Ä–∏—Ü—å)
        matrix_str = ""
        max_size = min(N, 50)
        
        for r in range(max_size):
            row_str = " ".join([f"{cell}" for cell in adjacency_matrix[r][:max_size]])
            matrix_str += row_str
            if max_size < N:
                 matrix_str += " ..."
            matrix_str += "\n"
        
        if max_size < N:
            matrix_str += "...\n"
        
        matrix_text.insert(tk.END, "--- –ú–∞—Ç—Ä–∏—Ü—è A[N][N] ---\n")
        matrix_text.insert(tk.END, matrix_str)
        matrix_text.config(state=tk.DISABLED)

if __name__ == "__main__":
    root = tk.Tk()
    app = WaveSearchApp(root)
    root.mainloop()